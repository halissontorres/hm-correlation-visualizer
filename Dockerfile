# Dockerfile

# Base image for installing dependencies and building the app
FROM node:20-alpine AS base
WORKDIR /app

# Stage 1: Install dependencies
FROM base AS deps
# Copy only package.json and lock file to leverage Docker cache
COPY package.json ./
COPY package-lock.json* ./
# Using npm as per package.json
RUN npm install --frozen-lockfile

# Stage 2: Build the application
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set build-time argument for API endpoint, can be overridden during docker build
ARG NEXT_PUBLIC_API_ENDPOINT=https://ajuste-correlacao-hindemburg-halissontorres.replit.app/ajuste_correlacao_potencial/
ENV NEXT_PUBLIC_API_ENDPOINT=${NEXT_PUBLIC_API_ENDPOINT}

RUN npm run build
# This will use the next.config.ts with output: 'standalone'

# Stage 3: Production image
# Use a lean base image
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
# Set runtime environment variable for API endpoint
# This can be overridden when running the container
ENV NEXT_PUBLIC_API_ENDPOINT=${NEXT_PUBLIC_API_ENDPOINT:-http://127.0.0.1:5000/}
ENV PORT=9002

# Create a non-root user and group
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy standalone output from the builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# Copy static assets from the public folder
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
# Copy static assets from the .next/static folder (generated by Next.js build)
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 9002

# The server.js file in the standalone output listens to the PORT env var by default
# or 3000 if not set. We've set PORT to 9002.
CMD ["node", "server.js"]
